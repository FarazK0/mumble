# -*- coding: utf-8 -*-
"""mumble.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xS0EEJ2I6DruhLI64rQ8_p6biTV-zKlX
"""

pip install youtube_dl

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy
import sys
import os
import pickle
import librosa
import librosa.display
from IPython.display import Audio
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow import keras

from tensorflow import keras as k

from keras.models import Sequential

df = pd.read_csv('/content/features_30_sec.csv')

df=df.drop(labels='filename',axis=1)

df.drop(df.iloc[:, 20:58], inplace = True, axis = 1)

class_list=df.iloc[:,-1]
converter=LabelEncoder()

y=converter.fit_transform(class_list)

df.drop(df.iloc[:, 20:21], inplace = True, axis = 1)

df.loc[len(df.index)] = inp
fitar=np.array(df.iloc[:,:],dtype = float)

from sklearn.preprocessing import StandardScaler

fit=StandardScaler()
X = fit.fit_transform(fitar)

X_train, X_test,y_train,y_test = train_test_split(X,y,test_size=0.33)

def trainModel(model, epochs, optimizer):
    batch_size = 128
    model.compile(optimizer=optimizer,
                  loss='sparse_categorical_crossentropy',
                  metrics='accuracy'
                  )
    return model.fit(X_train, y_train, validation_data=(X_test,y_test), epochs=epochs,
                      batch_size=batch_size)

def plotValidate(history):
   print("alidation accuracy", max(history.history["val_acc"]))
   pd.Datarame(history.history).plot(figsize=(12,6))
   plt.show()

model = k.models.Sequential([
              k.layers.Dense(512, activation='relu',input_shape=(X_train.shape[1],)),
              k.layers.Dropout(0.2),

              k.layers.Dense(256, activation='relu'),
              k.layers.Dropout(0.2),

              k.layers.Dense(128, activation='relu'),
              k.layers.Dropout(0.2),

              k.layers.Dense(64, activation='relu'),
              k.layers.Dropout(0.2),

              k.layers.Dense(10, activation='softmax'),
              


])

print(model.summary())

model_history=trainModel(model=model,epochs=600,optimizer='adam')

test_loss,test_acc = model.evaluate(X_test,y_test,batch_size=128)
print("loss=",test_loss)
print("\ntest accuracy=",test_acc)

from __future__ import unicode_literals
import youtube_dl


ydl_opts = {
    'format': 'worstaudio/worst',
    'outtmpl': '/content/music.mp3',
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192',
        
    }],
}

print("Paste youtube link of the music")

link=input()

if(os.path.exists("/content/music.mp3")):
 os.remove("/content/music.mp3")
with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    ydl.download([link])
import IPython
audio = "/content/music.mp3"
data, sr = librosa.load(audio, duration=30)
inp=[]
inp.append(data.shape[0])
chroma=librosa.feature.chroma_stft(data, sr=sr)
inp.append(chroma.mean())
inp.append(chroma.var())
inp.append(librosa.feature.rms(data).mean())
inp.append(librosa.feature.rms(data).var())

inp.append(librosa.feature.spectral_centroid(data, sr=sr).mean())
inp.append(librosa.feature.spectral_centroid(data, sr=sr).var())
inp.append(librosa.feature.spectral_bandwidth(data, sr=sr).mean())
inp.append(librosa.feature.spectral_bandwidth(data, sr=sr).var())
inp.append(librosa.feature.spectral_rolloff(data, sr=sr).mean())
inp.append(librosa.feature.spectral_rolloff(data, sr=sr).var())
inp.append(librosa.feature.zero_crossing_rate(data).mean())
inp.append(librosa.feature.zero_crossing_rate(data).var())
inp.append(librosa.effects.harmonic(data).mean())
inp.append(librosa.effects.harmonic(data).var())
inp.append(librosa.effects.percussive(data).mean())
inp.append(librosa.effects.percussive(data).var())
onset_env = librosa.onset.onset_strength(data, sr=sr)
inp.append(librosa.beat.tempo(onset_envelope=onset_env, sr=sr)[0])

inp.append(librosa.feature.mfcc(data, sr=sr,n_mfcc=1).mean())
inp.append(librosa.feature.mfcc(data, sr=sr,n_mfcc=1).var())
fit=StandardScaler()
df.loc[len(df.index)] = inp
fitar=np.array(df.iloc[:,:],dtype = float)
fit=StandardScaler()
X = fit.fit_transform(fitar)
end=len(df.index)
pred=model(X[end-1:end])

a=np.array(pred)
ind = np.where(a == a.max())

genredic={
    0: "blues"
    ,1: "classical"
    ,2: "country"
    ,3: "disco"
    ,4: "hiphop"
    ,5: "jazz"
    ,6: "metal"
    ,7: "pop"
    ,8: "reggae"
    ,9: "rock"

}
print(genredic[ind[1][0]])
IPython.display.Audio(data,rate=sr)